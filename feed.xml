<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://codingmate.github.io//jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="https://codingmate.github.io//jekyll-theme-yat/" rel="alternate" type="text/html" /><updated>2023-12-19T11:50:05+00:00</updated><id>https://codingmate.github.io//jekyll-theme-yat/feed.xml</id><title type="html">sypg</title><subtitle>Writer`n awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>codingmate</name></author><entry><title type="html">2023 Devfest 다녀와서</title><link href="https://codingmate.github.io//jekyll-theme-yat/review/2023/12/14/2023-DevContest.html" rel="alternate" type="text/html" title="2023 Devfest 다녀와서" /><published>2023-12-14T00:00:00+00:00</published><updated>2023-12-14T00:00:00+00:00</updated><id>https://codingmate.github.io//jekyll-theme-yat/review/2023/12/14/2023-DevContest</id><content type="html" xml:base="https://codingmate.github.io//jekyll-theme-yat/review/2023/12/14/2023-DevContest.html"><![CDATA[<h1 id="2023-devfest-다녀와서-얻은-느낀점-정리">2023 DevFest 다녀와서 얻은 느낀점 정리</h1>

<h2 id="느낀점">느낀점</h2>
<p>Back-end 개발로 경력이 3년이지만 개발자로서 무언가 갈증을 느끼던 때였다. 목이 말라 죽을 것 같지는 않아서 오아시스를 찾아 다닐 계획 조차 세우지도 않았다. 불안함에 그저 걸었지만, 변하는 것은 없었다. 난 말라가는 우물 속의 웅덩이에 빠져 있었으니까.</p>

<p>그러던 중, 친구의 추천으로 ‘2023Devfest’에 구경꾼으로 참가하게 되었다. 결과적으로 보면, 정말 잘했다는 생각을 한다. 많은 개발자들을 보며 에너지를 느꼈고, 내 자신에 대한 ‘메타인지’가 높아졌다고 느꼈기 때문이다. 발표자들은 내 세상속에서 완벽하지 않았지만 충분히 멋있었다. 그걸 경청하는 사람들도 물론 멋있다. 그러므로, 그 중 하나인 나도 멋있다.</p>

<p>막연하게 Github, Blog, Open Source Contribution가 개발자의 성장에 직결된다는 것을 알고 있다. 누군가 주입한것인지는 모르겠지만. Github 관리는 왜 하는지 잘 모르겠었고, Blog는 들이는 시간에 비해 결과물은 의미 없는 내용의 나열이라 느꼈다. 그리고, 정리가 잘 되어 있던 걸.Open Source Contribution은 단어만 알고 어떻게 시작하는지도 몰랐고, 동기부여도 되지 않았다.</p>

<p>그것을 직접 행하고 있는 사람, 행하려는 사람, 이미 해본 사람 들을 보고, ‘어떻게’, ‘왜’ 했는지에 대한 물음에 어느정도 답이 된 듯하다. 개발자로서 자극이 필요하다면. 아니, 주기적으로 자극이 필요하므로 이런 활동과 같이 세미나에 자주 참석해볼 생각이다.</p>

<p>나와 같이 본인이 방황하고 있다고 생각하시는 분들. 모두 화이팅.</p>

<h2 id="내용">내용</h2>
<h3 id="1-1300--1320-개발자-채용-방법-구글-재직-8년차-채용담당자">1. 13:00 ~ 13:20 개발자 채용 방법 (구글 재직 8년차 채용담당자)</h3>
<ol>
  <li>입사 지원서만 보고 인터뷰 제안을 하지 않음</li>
  <li>Github, Blog, Open Source Contribution 등 개발자로서 모든 활동 내역 확인
    <ul>
      <li>느낀점</li>
    </ul>
    <ul>
      <li>Github, Blog에 도전하기로 마음 먹었고, Open Source Contribution에 관심이 가지게 되었다.</li>
    </ul>
  </li>
</ol>

<h3 id="2-1320--1400-효과적인-단위-테스트-장동혁님-gdg-songdo-organizer--coupang">2. 13:20 ~ 14:00 효과적인 단위 테스트 (장동혁님, GDG Songdo Organizer / Coupang)</h3>
<ul>
  <li>좋은 테스트가 존재하는 프로젝트는 초기 개발 시작 비용이 더 크지만, 프로젝트가 진행될수록 따른 작업 비용이 <strong>선형적</strong>으로 증가</li>
  <li>기능 단위 테스트 : 기능 관점 테스트로, 의존성을 직접 설정 (<code class="language-plaintext highlighter-rouge">val userService = UserService()</code>)</li>
  <li>클래스 단위 테스트 : 클래스 관점 테스트로, <em>Mock</em>을 사용하여 의존성 설정</li>
  <li>좋은 단위 테스트
    <ol>
      <li>버그 방지</li>
      <li>리팩토링 내성</li>
      <li>짧은 실행시간</li>
      <li>유지보수성</li>
    </ol>
  </li>
  <li>느낀점
    <ul>
      <li>‘테스트가 없는 코드는 프로젝트 진행에 따라 작업 시간이 지수적으로 증가한다’라는 말에 동의했다. 앞으로 테스트 코드 작성을 습관화하여 버그 방지부터 심리적 안정까지 얻고 싶다.</li>
    </ul>
  </li>
</ul>

<h3 id="3-1410--1450-스터디를-활용하여-오픈소스-기여하는-방법김인제님-line-plus-gdg-songdo-oragnizer">3. 14:10 ~ 14:50 스터디를 활용하여 오픈소스 기여하는 방법(김인제님, LINE plus, GDG Songdo Oragnizer)</h3>
<ul>
  <li>오픈소스 기여
    <ol>
      <li>관심있는 오픈 소스의 Issue 확인. 코드 예시와 친절한 설명이 존재하는 Issue 선정</li>
      <li>Issue와 관련된 코드 위치 찾기</li>
      <li>친절한 설명과 함께 Pull Request</li>
      <li>Approver에게 피드백 받기</li>
      <li>내용 수정 후 다시 Pull Request 반복</li>
      <li>코드 반영</li>
    </ol>
  </li>
  <li>스터디의 오픈소스 유경험자가 상대적으로 어려운 이슈 선정과 코드 위치를 찾아준다</li>
  <li>소스 수정 시간은 전체 시간의 10% 정도밖에 차지하지 않는다.</li>
  <li>느낀점
    <ul>
      <li>오픈 소스는 지구의 자산이라 생각된다. 세계의 개발자들이 함께 창조하는 오픈 소스는, 인류의 가장 큰 재산 중 하나라고 느껴진다. 앞으로 코딩 중에 오픈소스에 이상이 발견되면, 진지하게 <em>PR</em> 작성을 고민할지도 모르겠다.</li>
    </ul>
  </li>
</ul>

<h3 id="4-1500--1540-소프트웨어-엔지니어링-생산성-배필주님-gdg-android-korea">4. 15:00 ~ 15:40 소프트웨어 엔지니어링 생산성 (배필주님, GDG Android Korea)</h3>
<ul>
  <li>책 ‘소프트웨어 엔지니어링 생산성 몰아보기’</li>
  <li>생산성
    <ol>
      <li>산업 시대에서는 결과물에 작업 시간이 절대적(공장 등)</li>
      <li>현재 시대에서는 결과물에 작업 시간이 절대적이지 않음</li>
      <li>경제학 생산성 = 산출물 / 투입량</li>
      <li>조직 생산성 = 수익 / 투자 비용</li>
    </ol>
  </li>
  <li>소프트웨어 엔지니어링 생산성
    <ol>
      <li>기준을 단순히 코드량, 커밋수, 개발 완료 작업 수로 정할 수 없음</li>
      <li>코드량이 기준?
        <ul>
          <li>빌 게이츠 왈 : “코드의 양이 생산성과 비례 한다는 말은, 비행기의 무게가 비행기 생산 진척도를 나타낸다는 말과 같다”</li>
        </ul>
      </li>
      <li>커밋수가 기준이라면 -&gt; 커밋 수는 임의 조작이 가능하다</li>
      <li>개발 완료 작업 수?
        <ul>
          <li>작업마다 가중치가 달라, 작업의 수로 알 수 없음</li>
        </ul>
      </li>
      <li>소프트웨어 엔지니어링이 코드 생산에 국한되어 있는 것이 아닌, 신입 교육 등 작업도 존재</li>
    </ol>
  </li>
  <li>생산성 측정
    <ul>
      <li>‘테일러리즘’ : 과학적으로 작업량을 측정하는 것</li>
      <li>기업의 테일러리즘 생산성 측정 : 최소의 비용으로 최대 생산성을 추구
        <ul>
          <li>개인은 계속 경쟁 해야하는 구조</li>
          <li>경쟁에서 밀리면 기회가 박탈되는 구조
            <ol>
              <li>기업 : 추구할 수록 높은 생산성을 얻을 수 있음</li>
              <li>개인 : 사기 저하, 자기계발 기회 박탈</li>
              <li>발표자는 일을 하는 주체와 평가하는 주체가 달라 생기는 문제라고 인식</li>
            </ol>
          </li>
        </ul>
      </li>
      <li>팀 문화로의 전환 : 동지애, 목표 우선 등 개인이 아닌 하나의 팀 단위로 생산성 측정</li>
    </ul>
  </li>
  <li>생산성 향상
    <ul>
      <li>사람마다 작업 성향이 존재하고, 서로 다를 수 있음을 인지해야 함
        <ol>
          <li>Interruption(개입) 최소화</li>
        </ol>
        <ul>
          <li>작업 재개가 빠름 -&gt; 실수 확률 증가</li>
          <li>작업 전환 주기가 빠름 -&gt; 개인 자신이 생산성이 낮다고 느낌
      2. 작업 진척을 느낄 때 생산성을 느낌</li>
          <li>게임 퀘스트와 같이 작업 수량이 매우 많다면, 여러 개를 동시에 하기보다 하나씩 완료하는 것이 생산성을 잘 느낌</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>CFP (Cosmic Function Point)로 공수 측정
    <ul>
      <li>작업을 작은 단위로 나눔</li>
      <li>기획자와의 대화
        <ol>
          <li>기획 : A지점에서 B지점까지 버스로 출근하는 방법을 계산하는 작업은 시간이 얼마나 소요될까요?</li>
          <li>AS-IS 개발자 : … 정확한 시간은 알기 어렵습니다</li>
          <li>To-BE
            <ol>
              <li>1CFP : A 지점, B 지점 주위에 정류장이 존재한다면 지점과 정류장 사이 거리 측정</li>
              <li>2CFP : 각 정류장까지 도보 이동 시간 계산</li>
              <li>3CFP : 각 정류장을 버스로 가는 방법 측정</li>
              <li>…</li>
              <li>nCFP 작업으로 k 시간 소요될 것으로 예상됩니다.</li>
            </ol>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>느낀점
    <ul>
      <li>‘생산성’이라는 키워드를 보고 가볍게 들을 수 있을거라 생각했지만, 새로운 관점을 배울 수 있는 중요한 시간이었다. ‘생산성’, 서로 다른 개인의 작업 성향에 대한 고민은 개인 생산자로서의 내 시간의 가치가 높아질 거라 생각된다. 어쩌면 팀원을 더 잘 이해할 수 있지 않을까.</li>
      <li>CFP를 사용한 의사 소통은 먼저 나부터 잘 모르기 때문에 당장 ‘CFP’ 용어 사용은 어려울 것 같다. 하지만, 작업을 작은 단위로 나눌수록 상대방이 공감할 수 있을 거라 되상된다. 꼭 기획자와 소통하는 것이 아니더라도 내 생각을 상대방에게 전달할 때 사용할 수 있는 기술 중 하나가 아닐까.</li>
    </ul>
  </li>
</ul>

<h3 id="5-1550--1630-spring-webflux-vs-spring-mvc--virtual-thread-이상준님-kakao-entertainment">5. 15:50 ~ 16:30 Spring Webflux VS Spring Mvc + Virtual Thread (이상준님, Kakao Entertainment)</h3>
<ul>
  <li>C10K( Concurrent 10K Users ) Problem
    <ul>
      <li>1990년 대 10000명이 넘는 수용할 수 있는 서버에서 발생할 수 있는 문제들</li>
      <li>현대에도 동시 사용자 수가 많은 서버 아키텍쳐가 필요함</li>
    </ul>
  </li>
  <li>Webflux
    <ul>
      <li>Event Driven, Reactive programming(명령문 -&gt; 선언문)</li>
      <li>이벤트 발행 &amp; 구독 -&gt; I/O Blocking 최소화 -&gt; 속도 빠름</li>
      <li>개발 난이도 높음 -&gt; 인건비 증가</li>
    </ul>
  </li>
  <li>Spring Mvc + Virtual Thread
    <ul>
      <li>기존 Java Thread
        <ul>
          <li>OS Thread : Java Thread = 1 : 1</li>
          <li>물리적으로 스레드 개수가 늘어나지 않는 이상, <strong>스레드 개수를 늘릴 수 없었음</strong></li>
        </ul>
      </li>
      <li>JDK 21
        <ul>
          <li>Lightweight Thread (경량 스레드)</li>
          <li><strong>Virtual Thread 지원</strong></li>
        </ul>
      </li>
      <li>SpringBoot 3.2.0 (23.11.23 Release)
        <ul>
          <li>application.properties에 ‘spring.threads.virtual.enable = true’ 한 줄 추가로 사용 가능</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>발표자는 앞으로 프로젝트 개발 시 ‘Spring MVC + Virtual Thread’를 고려
    <ul>
      <li>Webflux를 도입하기 전에
        <ul>
          <li>Scale Out, Sharding, Cashing, CQRS, 업무 재설계를 먼저 고려하겠다 함</li>
          <li>새로 배워야 하고, 오래되지 않은 기술로 아직 신뢰를 충분히 쌓지 못한다고 판단</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>느낀점
    <ul>
      <li>신기술을 도입하기 전에 또 다른 신기술, 기존에 사용하던 기술을 충분히 비교해봤다고 생각헀다. 실제로 속도 차이를 체감하기 위한 테스트 코드를 봤을 때, 내가 생각하던 개발자라고 생각했다. 기술에 종속되는 것이 아닌, 개발자가 선택할 권한을 온전히 갖는 것으로 보였다. <code class="language-plaintext highlighter-rouge">sleep()</code>과 같은 코드와 부하를 주는 애플리케이션으로 테스트가 진행 되었는데, 결국 서버가 과부하 상태라면, 가상으로 쓰레드의 개수를 늘려도 처리할 수 없으니 Lock 걸렸던 것으로 기억한다. 잘 나가는 신 기술을 사용하기 전에, 판단을 위한 테스트 코드 작성이 인상 깊었다.</li>
    </ul>
  </li>
</ul>

<h3 id="6-1640--1720-rendering-patterns-같이보기-임성호님철학과-출신-요기요-frontend-개발자-gdg-incheon-organizer">6. 16:40 ~ 17:20 Rendering Patterns 같이보기 (임성호님,철학과 출신 요기요 FrontEnd 개발자, GDG Incheon Organizer)</h3>
<ul>
  <li><a href="patterns.dev">patterns.dev</a></li>
  <li>Web vitals(프론트엔드 성능 최적화)
    <ol>
      <li>LCP(Largest Contentful Paint) : 페이지 로딩 중 가장 큰 콘텐츠 요소가 화면에 표시되는 데 걸리는 시간</li>
      <li>CLS(Cumulative Layout Shift) : 페이지 로딩 중 변화로 인한 사용자의 불편한 정도</li>
      <li>FID(First Input Delay) : 사용자가 페이지와 상호작용을 시도했을 때, 브라우저가 그 응답을 시작하는 데까지 걸리는 시간</li>
    </ol>
  </li>
  <li>웹 사이트의 로딩 성능을 측정하는 지표
    <ol>
      <li>TTFB(Time to First Byte) : 사용자가 웹 페이지를 요청한 후 첫번째 바이트가 브라우저에 도착하는 데 걸리는 시간</li>
      <li>TTI(Time to Interactive) : 페이지가 완전히 로드되고, 사용자의 입력에 반응할 수 있을 때까지 걸리는 시간</li>
      <li>FCP(First Contentful Paint) : 사용자가 페이지를 요청한 후, 화면에 첫번째 콘텐츠가 표시되기 시작할 때까지 걸리는 시간</li>
    </ol>
  </li>
  <li>웹 사이트 렌더링 방식
    <ol>
      <li>CSR(Client-Side Rendering) : 서버에서 초기 요청에 대한 화면의 뼈대만 제공하고, Client에서 JavaScript가 실행되며 페이지 완성</li>
      <li>SSG (Static Site Generation) : 모든 페이지가 빌드 타임에 미리 생성되어 정적 파일로 서버에 저장. 큰 파일도 로딩 시간이 빠르고 보안이 우수하지만, 실시간 업데이트가 어려움
        <ul>
          <li>CSR과 차이점으로, Bundle 크기가 작아짐</li>
          <li>CDN 사용</li>
          <li>Gatsby, VuePress</li>
        </ul>
      </li>
      <li>SSR(Serer-Side Rendering) : 서버에서 각 페이지 요청에 대해 HTML을 동적으로 생성하여 클라이언트에 전송. 초기 페이지 로드가 빠르지만 서버 부하 증가 가능성 존재</li>
    </ol>
  </li>
  <li>느낀점
    <ul>
      <li>프론트 엔드 화면에 대한 기초를 알 수 있었다. 서버, 백엔드에 치중하여 화면에 대해 고민을 해본적 없었는데, 발표자분께서 생각하게 만들어 주셨다. 용어만 정리한 것 뿐이지만, 프론트 엔드에 공부를 시작하게 되면 분명 도움될 거라 생각이 되었다.</li>
    </ul>
  </li>
</ul>

<h3 id="1730--1810-세상에-꼬인-이력은-없다황혜경님-나인코퍼레이션-테크-리크루터">17:30 ~ 18:10 세상에 꼬인 이력은 없다(황혜경님, 나인코퍼레이션 테크 리크루터)</h3>
<ul>
  <li>경력 : 하드웨어 엔지니어(납똄) -&gt; 개발자 커뮤니티 창업 -&gt; 임신, 출산 -&gt; 고객 경험 컨텐츠 에디팅 -&gt; 테크 리크루터
    <ol>
      <li>이력이 한 군데에서 차곡차곡 쌓이는 것이 아닌, 여러 개로 나뉘어져 있음</li>
      <li>이른 바 ‘꼬인 이력’</li>
    </ol>
  </li>
  <li>꼬인 이력
    <ol>
      <li>하고 있는 일의 주 전공 여부</li>
      <li>의지가 아닌 이직 (회사가 망해서 이직 등)
        <ul>
          <li>쓸모 없는 경험은 없으며, 모든 것은 <em>‘나를 알아가는 과정’</em> 이다.</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>인터뷰를 경험하며 개발자 성장에 중요한 것
    <ol>
      <li>소수의 인원이라도 사용자가 존재하는 서비스를 운영하는 경험</li>
      <li>커뮤니티 (동료 등)</li>
      <li>회사에 어떻게 기여하고, 얼마나 잘할 수 있을지</li>
      <li>면접에서 중요한 것은 어떤 문제를 어떻게 해결했는지 과정과 결과</li>
    </ol>
  </li>
  <li>느낀점
    <ul>
      <li>남편 분이 아내 분을 ‘테크 리크루터’로 추천하는 포스팅을 작성한 것과, 그 포스팅에 이전에 일했던 직장 동료 상사들의 ‘이 사람은 이런 식으로 소통하면 더 좋습니다’ 등의 댓글. 발표자 분이 쌓은 덕이 느껴졌다. 지난 동료 분들 덕을 많이 봤다고 하셨는데, 나는 발표자 분이 남편부터 시작하여 동료 분들 포함해서 덕을 많이 쌓으신 것으로 느껴졌다. 나도, 로봇 같은 개발자가 아닌 덕을 쌓고 인간적이고, 사람들과 함께하는 개발자가 되고싶다.</li>
    </ul>
  </li>
</ul>

<h3 id="1820--1900-스타트업-개발-경력-4년-주니어-개발자에서-개발팀장까지신혜연님-제이앤피메디-개발팀장">18:20 ~ 19:00 스타트업 개발 경력 4년, 주니어 개발자에서 개발팀장까지(신혜연님, 제이앤피메디 개발팀장)</h3>
<ul>
  <li>발표자는 스타트업 이직 이전 대기업 2년과 중견기업 2년 경험을 보유</li>
  <li>Junior
    <ol>
      <li>Task에 대한 전체적인 맥락을 이해하려 노력</li>
      <li>사내 스터디, 적극적인 계발, 주말 활용</li>
      <li><em>주인 의식</em></li>
    </ol>
  </li>
  <li>Part Lead
    <ol>
      <li>채용부터 시작. 무엇부터 해야할 지 의논할 팀원이 없는 상태</li>
      <li>면접관으로 참여하며, 면접 종료 후 다른 면접관에게 질문하는 등 적극적인 태도</li>
      <li>‘Part Lead’?
        <ul>
          <li>정답 보다는 과정</li>
          <li>Interface, Scheme를 설계하는 사람</li>
          <li>코드 리뷰 : 관련 Article Url을 전달하고, 본인에게 내용을 설명하는 것을 요청</li>
        </ul>
      </li>
      <li>‘Good Part’?
        <ul>
          <li>Part Lead가 없어도 Part가 돌아가게</li>
        </ul>
      </li>
      <li>어떤 ‘Part Lead’로 비춰지고 싶은가?
        <ul>
          <li>명확한 업무지시</li>
          <li>솔직한 피드백</li>
          <li>파트장과 파트원은 <strong>업무-수직적, 문화-수평적</strong> 관계</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>Team Leader
    <ul>
      <li>Part를 2개 이상 맡게됨
        <ul>
          <li>고객 유치가 이미 되어 있으며, 기능이 많고 범위가 커져 복잡해짐</li>
        </ul>
      </li>
      <li>스프린트 도입 (옆 사람이 뭐 하는지 모르는 것에 대한 대처 )</li>
      <li>‘Pull Request -&gt; Approve’
        <ul>
          <li><strong>‘문제 없음 보장’이 아닌 ‘함께 일하고 있음’</strong> 의 의미</li>
        </ul>
      </li>
      <li>분석, 설계에 시간을 많이 씀</li>
      <li>‘Team Lead’?
        <ul>
          <li>파트장을 육성하는 사람</li>
          <li>구성원에게 과제를 할당하는 사람</li>
          <li>동일한 인력으로 시너지를 고려하여 팀 구성. 전혀 다른 생산성을 경험했음</li>
          <li>일히일비X. 이후에도 계속 함께 일해야 함. 업무를 대할 때는 이성적으로</li>
          <li>이슈를 한 면이 아닌 입체적으로 이해해야 하고, 최적의 해를 제시해야 함</li>
          <li>제품 관점에서 기술 부채, 리스크 식별(리스크는 어떻게 해체할지 고민)</li>
          <li>팀원들의 잡담을 허투로 듣지 않아야 함. 은연중에 진심을 포함하고 있다고 생각</li>
          <li>“관심은 지속적, 직접적 개입 최소화”. 예) 모든 Slack을 확인하고 궁금한 것은 당사자에게 물어봄</li>
        </ul>
      </li>
      <li>기업의 상황에 따라 팀은 계속 바뀌어야 된다. (feat.캡틴 아메리카)
        <ul>
          <li>초기에는 Team Lead가 Super Hero가 되는 것</li>
          <li>다른 Hero들과 함께 해결</li>
          <li>어벤저스와 같은 그룹들과 함께</li>
        </ul>
      </li>
      <li>책 ‘생존을 넘어 번창으로’</li>
    </ul>
  </li>
  <li>느낀점
    <ul>
      <li>발표자 분을 보며 ‘선배’라는 말이 떠올랐다. 4년 안에 개발 팀장이 되기 위해서는 어떤 삶을 살아야 하는지 간접적으로 경험한 듯 했다. 수 많은 물음, 답변이 존재해야 한다. 혼자서 답을 찾을 수 없으면 책을 보고, 유튜브를 활용하고, 주변 분들께 물었다고 했다. 또한, 개발자로서 본인, 규모가 커져가는 팀 등에 재미를 느낀다고 했다. 사회인으로서 성장한다는 것을 간접 경험했으며, 그것이 개발자라서 더 특별했던 것 같다. 마지막 시간대의 강연이라 어느정도 지친 상태였다. 주변의 사람들도 아마 그랬을 것이다. 하지만, 모두의 눈빛을 초롱초롱하게 만드는 힘이 있었고, 마지막 Q&amp;A 떄 시간상 2명의 질문을 받고, 복도에서 나머지 7명 정도의 질문을 받아주었다. 속으로 생각만 했다. ‘멋있는 선배. 후배가 깜깜한 길을 걸으려 했는데, 앞의 등불이 되어주셔서 감사합니다’ 라고. 조금 오글거린다.</li>
      <li>끝나고 질문한 내용
        <ol>
          <li>팀원들과 잡담을 위한 인문학적인 지식을 따로 쌓냐. 예를 들어, 팀원의 나이가 더 많고, 성별이 다를 수 있으며 본인이 했던 경험을 따라오지 못하는 후배 등의 존재를 위한
            <ul>
              <li>(답변) 발표해서 언급했던 것은 잡담을 잘 하는 거라기 보단 <strong>잘 듣는 것</strong> 을 말한 것이었음.</li>
            </ul>
          </li>
          <li>주변에 훌륭한 ‘멘토’ 또는 ‘어른’이 함꼐하는지. 발표 동안 문제의 양 뿐만 아니라 질적으로도 우수했는데, 혼자만의 세계로 이해할 수 없거나 답을 내릴 수 없을만한 문제도 많다고 느꼈다.
            <ul>
              <li>(답변) 회사의 CEO, CTO 분께 많은 가르침을 받고 있다.</li>
            </ul>
          </li>
          <li>만일 CEO, CTO 분이 당장 없는 상황에서 큰 문제가 발생하면 어떻게 대처 하겠는가
            <ul>
              <li>(답변) 앞서 말했던 본인의 방법을 적용해보고, 주변에 물어도 안된다면 팀의 구성원들과 함께 풀어가고 싶다.</li>
            </ul>
          </li>
          <li>(못 물어본 것) 어떻게 그렇게 지속적은 동기부여(에너지)가 생기는 것인지 궁금</li>
        </ol>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>codingmate</name></author><category term="review" /><category term="review" /><summary type="html"><![CDATA[2023 DevFest 다녀와서 얻은 느낀점 정리]]></summary></entry><entry><title type="html">직접 사용할 마크다운 정리</title><link href="https://codingmate.github.io//jekyll-theme-yat/markdown/2023/12/11/markdown-sentence.html" rel="alternate" type="text/html" title="직접 사용할 마크다운 정리" /><published>2023-12-11T00:00:00+00:00</published><updated>2023-12-11T00:00:00+00:00</updated><id>https://codingmate.github.io//jekyll-theme-yat/markdown/2023/12/11/markdown-sentence</id><content type="html" xml:base="https://codingmate.github.io//jekyll-theme-yat/markdown/2023/12/11/markdown-sentence.html"><![CDATA[<h2 id="마크다운markdown-문법-기초">마크다운(Markdown) 문법 기초</h2>

<h3 id="1-헤더headers">1. 헤더(Headers)</h3>
<p>단락의 제목을 나타내며, 크기는 H1 &gt; H2 &gt; H3 &gt; H4 &gt; H5 &gt; H6 순이다.</p>
<h1 id="-h1"># H1</h1>
<h2 id="-h2">## H2</h2>
<p><em>H1과 H2는 선이 생긴다.</em></p>
<h3 id="-h3">### H3</h3>
<h4 id="-h4">#### H4</h4>
<h5 id="-h5">##### H5</h5>
<h6 id="-h6">###### H6</h6>

<h3 id="2-강조emphasis">2. 강조(Emphasis)</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. *이탤릭체* : `*ABC*` 또는 `_ABC_`  
2. **볼드체** : `**ABC**` 또는 `__ABC__` 
</code></pre></div></div>

<h3 id="3-취소선-strikethrough-----">3. 취소선 (Strikethrough) : <code class="language-plaintext highlighter-rouge">---</code></h3>
<hr />

<h3 id="4-개행-new-line">4. 개행 (New Line)</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 문장 끝에 공백 두 개(&amp;nbsp;&amp;nbsp;)와 Enter 추가 한 번 개행한 뒤 작성  
    `Hello `&amp;nbsp;`(enter)'`world
2. 개행하고 싶은 문장 사이에 개행(Enter)을 두 번 입력  
    Hello&lt;br&gt;World
3. `&lt;br&gt;`을 문장 뒤에 추가한다.  
    `Hello&lt;br&gt;world`
</code></pre></div></div>

<h3 id="5-인라인-코드inline-code--백틱으로-감싼다">5. 인라인 코드(Inline Code) : 백틱(`)으로 감싼다.</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>자료구조 정수형 중 하나인 Int의 Kotlin에서는 \``val a = 1`\`과 같이 선언할 수 있다.
</code></pre></div></div>

<h3 id="6-코드-블록-code-block--백틱-3개-로-감싼다">6. 코드 블록 (Code Block) : 백틱 3개 (''')로 감싼다.</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\`\`\`kotlin
```kotlin
fun main() {
    println("Hello World!!!")
}
```
\`\`\`
</code></pre></div></div>

<h3 id="7-링크-links">7. 링크 (Links)</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`[Google](http://www.google.com)` -&gt; [Google](http://www.google.com)
</code></pre></div></div>

<h3 id="8-인용문-blockquotes">8. 인용문 (Blockquotes)</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; '직접 인용' : 원문을 그대로 가져다 쓰는 행위  
&gt; '간접 인용' : 원문과 내용을 정리하여 자신의 언어로 풀어 쓴 것
</code></pre></div></div>

<h3 id="9-이미지-image">9. 이미지 (Image)<br /></h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`![IMAGE_NAME](/assets/images/banners/home.jpeg)`
</code></pre></div></div>

<p><img src="/assets/images/banners/home.jpeg" alt="IMAGE_NAME" /></p>

<h3 id="10-표-table">10. 표 (Table)</h3>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| No | 동물(왼쪽 정렬) | 이름(중앙 정렬) | 나이(오른쪽 정렬) |
|----|:------|:-----:|------:|
| 1  | 고양이  | 용식 | 7 |
| 2  | 개  | 백구  | 3  |
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>No</th>
      <th style="text-align: left">동물(왼쪽 정렬)</th>
      <th style="text-align: center">이름(중앙 정렬)</th>
      <th style="text-align: right">나이(오른쪽 정렬)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td style="text-align: left">고양이</td>
      <td style="text-align: center">용식</td>
      <td style="text-align: right">7</td>
    </tr>
    <tr>
      <td>2</td>
      <td style="text-align: left">개</td>
      <td style="text-align: center">백구</td>
      <td style="text-align: right">3</td>
    </tr>
  </tbody>
</table>]]></content><author><name>codingmate</name></author><category term="markdown" /><category term="markdown" /><summary type="html"><![CDATA[마크다운(Markdown) 문법 기초]]></summary></entry></feed>